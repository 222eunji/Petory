# .github/workflows/deploy.yml
name: 🚀 Auto Deploy to AWS

# main 브랜치에 push하면 자동 배포
on:
  push:
    branches: [ main, deploy/test-prod, dev ]  # 현재 테스트용 + 나중에 main만

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 캐시 설정
      - name: 📦 Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. AWS 자격증명 설정
      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. ECR 로그인
      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 6. ECR에서 기존 이미지 정리
      - name: 🗑️ Clean up old ECR images
        run: |
          echo "Cleaning up old ECR images..."
          OLD_IMAGES=$(aws ecr list-images --repository-name petory-app --region ap-northeast-2 --filter tagStatus=TAGGED --query 'imageIds[?imageTag!=`latest`]' --output json)
          if [ "$OLD_IMAGES" != "[]" ]; then
            echo "Deleting old tagged images..."
            aws ecr batch-delete-image --repository-name petory-app --region ap-northeast-2 --image-ids "$OLD_IMAGES" || true
          else
            echo "No old images to delete."
          fi

      # 7. Docker 이미지 빌드 & 푸시
      - name: 🏗️ Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: petory-app
        run: |
          echo "🧹 Cleaning up local images..."
          docker system prune -f
          
          echo "📦 Building Docker image..."
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "📤 Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "✅ Image pushed successfully!"

      # 8. EC2에 배포
      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "🔑 Logging into ECR..."
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin 426775245898.dkr.ecr.ap-northeast-2.amazonaws.com
            
            echo "🛑 Stopping current container..."
            sudo docker stop petory-app || true
            sudo docker rm petory-app || true
            
            echo "🗑️ Removing old images..."
            sudo docker rmi 426775245898.dkr.ecr.ap-northeast-2.amazonaws.com/petory-app:latest || true
            
            echo "📥 Pulling latest image..."
            sudo docker pull 426775245898.dkr.ecr.ap-northeast-2.amazonaws.com/petory-app:latest
            
            echo "🔄 Starting new container..."
            sudo docker run -d --name petory-app -p 8080:8080 --env-file .env 426775245898.dkr.ecr.ap-northeast-2.amazonaws.com/petory-app:latest
            
            echo "⏳ Waiting for container to start..."
            sleep 15
            
            echo "🔍 Checking container status..."
            sudo docker ps | grep petory-app || echo "Container not found!"
            
            echo "🏥 Health check..."
            curl -f http://localhost:8080/actuator/health || echo "⚠️ Health check failed - service might still be starting"
            
            echo "✅ Deployment completed successfully!"